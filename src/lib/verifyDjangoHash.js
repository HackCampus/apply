const crypto = require('crypto')
const pify = require('pify')
const pbkdf2 = pify(crypto.pbkdf2)

// Verifies a given password against a digest generated by Django's
// django.contrib.auth.hashers.PBKDF2PasswordHasher module.
module.exports = async function verifyDjangoHash (password, digest) {
  if (typeof password !== 'string' && typeof digest !== 'string') {
    throw new TypeError('inputs must be strings')
  }
  const parts = digest.split('$')
  if (parts.length !== 4) {
    return false
  }
  const [algorithm, iterationsStr, salt, expectedHash] = parts
  if (algorithm !== 'pbkdf2_sha256') {
    return false
  }
  const iterations = Number.parseInt(iterationsStr)
  const keyLength = 32
  const actualHash = await pbkdf2(password, salt, iterations, keyLength, 'sha256')
  return actualHash.toString('base64') === expectedHash
}
